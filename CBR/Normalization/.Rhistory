# # -------------------------------
# inputs <- read.xlsx('Input/Indicators_Selection.xls', sheetName = 'Country_level_2', header = TRUE)
# input_codes <- as.character(inputs$Indicator_Id)
# input_countries <- names(inputs[, -c(1:3)])
# input_countries <- gsub('.', ' ', input_countries, fixed = TRUE) %>% recode(`Korea  Rep ` = 'Korea, Rep.',
#                                                                             `Egypt  Arab Rep ` = 'Egypt, Arab Rep.',
#                                                                             `Hong Kong SAR  China` = 'Hong Kong SAR, China')
# # # verification of country nnames compatibility
# # fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Value
#
# input_codes <- data.frame(input_codes)
# copy_to(fs, input_codes, temporary = FALSE)
#
# input_countries <- data.frame(Country_Value = input_countries, Country_Id = fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Id)
# copy_to(fs, input_countries, temporary = FALSE)
# loading prepared objects
input_codes <- tbl(fs, "input_codes") %>% collect()
input_countries <- tbl(fs, "input_countries") %>% collect()
# -------------------------------
# Filtering
# -------------------------------
fs_data <- filter(fs_data, Indicator_Id %in% input_codes$input_codes & Country_Id %in% input_countries$Country_Id) %>% select(-Country_Id)
rm(input_codes, input_countries)
# -------------------------------
# NA Imputation
# -------------------------------
data_spread <- fs_data %>% spread(Country_Value, value, fill = NA)
nas_numbers <- select(data_spread, -date) %>% group_by(category, Indicator_Value, Indicator_Id) %>% summarize_each(funs(sum(is.na(.))))
nas_numbers <- nas_numbers %>% gather(key = Country_Value, value = nas_number,
-c(category, Indicator_Value, Indicator_Id))
fs_data <- fs_data %>% left_join(nas_numbers, by = c('category' = 'category',
'Indicator_Value' = 'Indicator_Value',
'Indicator_Id' = 'Indicator_Id',
'Country_Value' = 'Country_Value')) %>% mutate(value = as.numeric(value))
rm(nas_numbers, data_spread)
# subsetting
no_interpolation <- fs_data %>% filter(nas_number == 0)
spline_interpolation <- fs_data %>% filter(nas_number <= 4 & nas_number > 0)
linear_interpolation <- fs_data %>% filter(nas_number > 4)
# dim(no_interpolation)[1] + dim(spline_interpolation)[1] + dim(linear_interpolation)[1] == dim(fs_data)[1]
# spline interpolation
spline_interpolation <- spline_interpolation %>% group_by(category,
Indicator_Value,
Indicator_Id,
Country_Value) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% mutate(value_imp = na.interpolation(x = value, option = 'spline', method = 'fmm'))
# imputation example and methodology
# data_temp <- filter(spline_interpolation, Indicator_Id == 'GFDD.DI.14' & Country_Value == 'New Zealand') %>% arrange(date) %>% mutate(value = as.numeric(value))
# ggplot(data_temp, aes(x = date, y = value)) + geom_point()
# data_temp <- data_temp %>% mutate(value = na.interpolation(x = value, option = 'spline', method = 'fmm'))
# # Forsythe, G. E., Malcolm, M. A. and Moler, C. B. (1977) Computer Methods for Mathematical Computations. Wiley.
# linear interpolation
linear_interpolation <- linear_interpolation %>% group_by(category,
Indicator_Value,
Indicator_Id,
Country_Value) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% mutate(value_imp = na.interpolation(x = value, option = 'linear'))
# # imputation example and methodology
# data_temp <- filter(linear_interpolation, Indicator_Id == 'GFDD.OI.01' & Country_Value == 'Iceland') %>% arrange(date) %>% mutate(value = as.numeric(value))
# ggplot(data_temp, aes(x = date, y = value)) + geom_point()
# data_temp <- data_temp %>% mutate(value = na.interpolation(x = value, option = 'linear'))
linear_interpolation <- linear_interpolation %>% mutate(value = value_imp) %>% select(-value_imp)
spline_interpolation <- spline_interpolation %>% mutate(value = value_imp) %>% select(-value_imp)
View(linear_interpolation)
View(no_interpolation)
View(spline_interpolation)
fs_data_imputed <- linear_interpolation %>% bind_rows(spline_interpolation) %>% bind_rows(no_interpolation) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% select(-nas_number)
View(fs_data_imputed)
rm(fs_data, no_interpolation, spline_interpolation, linear_interpolation)
copy_to(fs, fs_data_imputed, temporary = FALSE)
rm(list = ls())
setwd('~/Programming/R/R_code/CMASF/CBR')
library(purrr)
library(tidyr)
library(dplyr)
library(RSQLite)
library(data.table)
library(FactoMineR)
library(psych)
library(zoo)
library(imputeTS)
library(ggplot2)
library(ggrepel)
library(xlsx)
library(Amelia)
library(forcats)
## ------------------------------
## Functions
## ------------------------------
# -------------------------------
# Loading objects
# -------------------------------
fs <- src_sqlite("fs_data.sqlite", create = FALSE)
fs_data <- tbl(fs, "fs_data") %>% collect(n = Inf)
# # -------------------------------
# # Preparing SQL-tables
# # -------------------------------
# inputs <- read.xlsx('Input/Indicators_Selection.xls', sheetName = 'Country_level_2', header = TRUE)
# input_codes <- as.character(inputs$Indicator_Id)
# input_countries <- names(inputs[, -c(1:3)])
# input_countries <- gsub('.', ' ', input_countries, fixed = TRUE) %>% recode(`Korea  Rep ` = 'Korea, Rep.',
#                                                                             `Egypt  Arab Rep ` = 'Egypt, Arab Rep.',
#                                                                             `Hong Kong SAR  China` = 'Hong Kong SAR, China')
# # # verification of country nnames compatibility
# # fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Value
#
# input_codes <- data.frame(input_codes)
# copy_to(fs, input_codes, temporary = FALSE)
#
# input_countries <- data.frame(Country_Value = input_countries, Country_Id = fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Id)
# copy_to(fs, input_countries, temporary = FALSE)
# loading prepared objects
input_codes <- tbl(fs, "input_codes") %>% collect()
input_countries <- tbl(fs, "input_countries") %>% collect()
# -------------------------------
# Filtering
# -------------------------------
fs_data <- filter(fs_data, Indicator_Id %in% input_codes$input_codes & Country_Id %in% input_countries$Country_Id) %>% select(-Country_Id)
rm(input_codes, input_countries)
# -------------------------------
# NA Imputation
# -------------------------------
data_spread <- fs_data %>% spread(Country_Value, value, fill = NA)
nas_numbers <- select(data_spread, -date) %>% group_by(category, Indicator_Value, Indicator_Id) %>% summarize_each(funs(sum(is.na(.))))
nas_numbers <- nas_numbers %>% gather(key = Country_Value, value = nas_number,
-c(category, Indicator_Value, Indicator_Id))
fs_data <- fs_data %>% left_join(nas_numbers, by = c('category' = 'category',
'Indicator_Value' = 'Indicator_Value',
'Indicator_Id' = 'Indicator_Id',
'Country_Value' = 'Country_Value')) %>% mutate(value = as.numeric(value))
rm(nas_numbers, data_spread)
# subsetting
no_interpolation <- fs_data %>% filter(nas_number == 0)
spline_interpolation <- fs_data %>% filter(nas_number <= 4 & nas_number > 0)
linear_interpolation <- fs_data %>% filter(nas_number > 4)
# dim(no_interpolation)[1] + dim(spline_interpolation)[1] + dim(linear_interpolation)[1] == dim(fs_data)[1]
# spline interpolation
spline_interpolation <- spline_interpolation %>% group_by(category,
Indicator_Value,
Indicator_Id,
Country_Value) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% mutate(value_imp = na.interpolation(x = value, option = 'spline', method = 'fmm'))
# imputation example and methodology
# data_temp <- filter(spline_interpolation, Indicator_Id == 'GFDD.DI.14' & Country_Value == 'New Zealand') %>% arrange(date) %>% mutate(value = as.numeric(value))
# ggplot(data_temp, aes(x = date, y = value)) + geom_point()
# data_temp <- data_temp %>% mutate(value = na.interpolation(x = value, option = 'spline', method = 'fmm'))
# # Forsythe, G. E., Malcolm, M. A. and Moler, C. B. (1977) Computer Methods for Mathematical Computations. Wiley.
# linear interpolation
linear_interpolation <- linear_interpolation %>% group_by(category,
Indicator_Value,
Indicator_Id,
Country_Value) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% mutate(value_imp = na.interpolation(x = value, option = 'linear'))
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
# gg_linear <- gg_linear + geom_point(filter(), linear_long, x = lubridate::year(as.Date(date, format = '%Y')), y = )
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank())
gg_linear
### ggplotting interpolation ###
linear_long <- gather(linear_interpolation, key = value_category, value = value, -c(category, Indicator_Value, Indicator_Id, Country_Value, nas_number, date)) %>% mutate(value_category = factor(value_category, levels = c('value_imp', 'value')), value_category = recode(value_category, value_imp = 'Дополнено', value = 'Исходный ряд'))
spline_long <- gather(spline_interpolation, key = value_category, value = value, -c(category, Indicator_Value, Indicator_Id, Country_Value, nas_number, date)) %>% mutate(value_category = factor(value_category, levels = c('value_imp', 'value')), value_category = recode(value_category, value_imp = 'Дополнено', value = 'Исходный ряд'))
rm(linear_interpolation, spline_interpolation, no_interpolation)
rm(fs_data)
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
# gg_linear <- gg_linear + geom_point(filter(), linear_long, x = lubridate::year(as.Date(date, format = '%Y')), y = )
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = FALSE)
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank())
gg_linear
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = FALSE)
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 5))
gg_linear
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = FALSE)
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 7))
gg_linear
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = FALSE)
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text.x = element_text(size = 7))
gg_linear
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = FALSE)
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8))
gg_linear
View(spline_long)
# separating graphs by category
spline_long %>% group_by(category) %>% {
ggplot(., aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
+ facet_wrap(~Country_Value + Indicator_Value, scales = "free")
+ labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
+ guides(colour = FALSE)
+ theme_bw() + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8))
}
spline_long %>% group_by(category) %>% {
ggplot(., aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией") + guides(colour = FALSE) + theme_bw() + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8))
}
library(purrr)
partial(lm, mpg ~ disp)
?partial
spline_long %>% slice_rows('category') %>% by_slice(ggplot(., aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией") + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8)))
?by_slice
plotting <- function(x) {ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией") + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8))
}
spline_long %>% slice_rows('category') %>% by_slice(plotting)
plotting <- function(x) {return(ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией") + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8)))}
spline_long %>% slice_rows('category') %>% by_slice(plotting)
print(gg_linear)
results <- spline_long %>% slice_rows('category') %>% by_slice(plotting)
results$.out[[1]]
# function
plotting <- function(x) {return(ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной сплайнами") + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8)))}
# separating graphs by category
results <- spline_long %>% slice_rows('category') %>% by_slice(plotting)
# function
plotting <- function(x) {return(ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = paste0(category, ": ряды, заполненные линейной сплайнами")) + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8)))}
# separating graphs by category
results <- spline_long %>% slice_rows('category') %>% by_slice(plotting)
spline_long[['category']]
spline_long[['category']][1]
# function
plotting <- function(x) {return(ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL, title = paste0(x[['category']][1], ": ряды, заполненные линейной сплайнами")) + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8)))}
# separating graphs by category
results <- spline_long %>% slice_rows('category') %>% by_slice(plotting)
print(results$category[[1]])
results$.out[[1]]
paste0(spline_long[['category']][1], ": ряды, заполненные линейной сплайнами")
paste0(results$category[[1]], ": ряды, заполненные линейной сплайнами")
results$.out[[1]] + ggtitle(paste0(results$category[[1]], ": ряды, заполненные линейной сплайнами"))
# function
plotting <- function(x) {return(ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL) + guides(colour = FALSE) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8)))}
# separating graphs by category
results <- spline_long %>% slice_rows('category') %>% by_slice(plotting)
# ggplotting
for (i in 1:length(results$category)) {
results$.out[[i]] + ggtitle(paste0(results$category[[i]], ": ряды, заполненные линейной сплайнами"))
}
for (i in 1:length(results$category)) {
print(results$.out[[i]] + ggtitle(paste0(results$category[[i]], ": ряды, заполненные линейной сплайнами")))
}
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = guide_legend(title = ''))
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8))
gg_linear
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = guide_legend(title = ''))
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8),
legend.position = "bottom")
gg_linear
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = guide_legend(title = ''))
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8),
legend.position = "top")
gg_linear
fs <- src_sqlite("fs_data.sqlite", create = FALSE)
fs_data <- tbl(fs, "fs_data") %>% collect(n = Inf)
# # -------------------------------
# # Preparing SQL-tables
# # -------------------------------
# inputs <- read.xlsx('Input/Indicators_Selection.xls', sheetName = 'Country_level_2', header = TRUE)
# input_codes <- as.character(inputs$Indicator_Id)
# input_countries <- names(inputs[, -c(1:3)])
# input_countries <- gsub('.', ' ', input_countries, fixed = TRUE) %>% recode(`Korea  Rep ` = 'Korea, Rep.',
#                                                                             `Egypt  Arab Rep ` = 'Egypt, Arab Rep.',
#                                                                             `Hong Kong SAR  China` = 'Hong Kong SAR, China')
# # # verification of country nnames compatibility
# # fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Value
#
# input_codes <- data.frame(input_codes)
# copy_to(fs, input_codes, temporary = FALSE)
#
# input_countries <- data.frame(Country_Value = input_countries, Country_Id = fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Id)
# copy_to(fs, input_countries, temporary = FALSE)
# loading prepared objects
input_codes <- tbl(fs, "input_codes") %>% collect()
input_countries <- tbl(fs, "input_countries") %>% collect()
# -------------------------------
# Filtering
# -------------------------------
fs_data <- filter(fs_data, Indicator_Id %in% input_codes$input_codes & Country_Id %in% input_countries$Country_Id) %>% select(-Country_Id)
rm(input_codes, input_countries)
# -------------------------------
# NA Imputation
# -------------------------------
data_spread <- fs_data %>% spread(Country_Value, value, fill = NA)
nas_numbers <- select(data_spread, -date) %>% group_by(category, Indicator_Value, Indicator_Id) %>% summarize_each(funs(sum(is.na(.))))
nas_numbers <- nas_numbers %>% gather(key = Country_Value, value = nas_number,
-c(category, Indicator_Value, Indicator_Id))
fs_data <- fs_data %>% left_join(nas_numbers, by = c('category' = 'category',
'Indicator_Value' = 'Indicator_Value',
'Indicator_Id' = 'Indicator_Id',
'Country_Value' = 'Country_Value')) %>% mutate(value = as.numeric(value))
rm(nas_numbers, data_spread)
# subsetting
no_interpolation <- fs_data %>% filter(nas_number == 0)
spline_interpolation <- fs_data %>% filter(nas_number <= 4 & nas_number > 0)
linear_interpolation <- fs_data %>% filter(nas_number > 4)
View(linear_interpolation)
save(linear_long, file = "linear_long.rda")
save(spline_long, file = "linear_long.rda")
save(linear_long, file = "linear_long.rda")
save(spline_long, file = "spline_long.rda")
rm(list = ls())
setwd('~/Programming/R/R_code/CMASF/CBR')
load("linear_long.rda")
load("spline_long.rda")
rm(list = ls())
setwd('~/Programming/R/R_code/CMASF/CBR')
library(purrr)
library(tidyr)
library(dplyr)
library(RSQLite)
library(data.table)
library(FactoMineR)
library(psych)
library(zoo)
library(imputeTS)
library(ggplot2)
library(ggrepel)
library(xlsx)
library(Amelia)
library(forcats)
## ------------------------------
## Functions
## ------------------------------
# -------------------------------
# Loading objects
# -------------------------------
fs <- src_sqlite("fs_data.sqlite", create = FALSE)
fs_data <- tbl(fs, "fs_data") %>% collect(n = Inf)
# # -------------------------------
# # Preparing SQL-tables
# # -------------------------------
# inputs <- read.xlsx('Input/Indicators_Selection.xls', sheetName = 'Country_level_2', header = TRUE)
# input_codes <- as.character(inputs$Indicator_Id)
# input_countries <- names(inputs[, -c(1:3)])
# input_countries <- gsub('.', ' ', input_countries, fixed = TRUE) %>% recode(`Korea  Rep ` = 'Korea, Rep.',
#                                                                             `Egypt  Arab Rep ` = 'Egypt, Arab Rep.',
#                                                                             `Hong Kong SAR  China` = 'Hong Kong SAR, China')
# # # verification of country nnames compatibility
# # fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Value
#
# input_codes <- data.frame(input_codes)
# copy_to(fs, input_codes, temporary = FALSE)
#
# input_countries <- data.frame(Country_Value = input_countries, Country_Id = fs_data[match(input_countries, fs_data$Country_Value), ]$Country_Id)
# copy_to(fs, input_countries, temporary = FALSE)
# loading prepared objects
input_codes <- tbl(fs, "input_codes") %>% collect()
input_countries <- tbl(fs, "input_countries") %>% collect()
# -------------------------------
# Filtering
# -------------------------------
fs_data <- filter(fs_data, Indicator_Id %in% input_codes$input_codes & Country_Id %in% input_countries$Country_Id) %>% select(-Country_Id)
rm(input_codes, input_countries)
# -------------------------------
# NA Imputation
# -------------------------------
data_spread <- fs_data %>% spread(Country_Value, value, fill = NA)
nas_numbers <- select(data_spread, -date) %>% group_by(category, Indicator_Value, Indicator_Id) %>% summarize_each(funs(sum(is.na(.))))
nas_numbers <- nas_numbers %>% gather(key = Country_Value, value = nas_number,
-c(category, Indicator_Value, Indicator_Id))
fs_data <- fs_data %>% left_join(nas_numbers, by = c('category' = 'category',
'Indicator_Value' = 'Indicator_Value',
'Indicator_Id' = 'Indicator_Id',
'Country_Value' = 'Country_Value')) %>% mutate(value = as.numeric(value))
rm(nas_numbers, data_spread)
# subsetting
no_interpolation <- fs_data %>% filter(nas_number == 0)
spline_interpolation <- fs_data %>% filter(nas_number <= 4 & nas_number > 0)
linear_interpolation <- fs_data %>% filter(nas_number > 4)
# dim(no_interpolation)[1] + dim(spline_interpolation)[1] + dim(linear_interpolation)[1] == dim(fs_data)[1]
# spline interpolation
spline_interpolation <- spline_interpolation %>% group_by(category,
Indicator_Value,
Indicator_Id,
Country_Value) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% mutate(value_imp = na.interpolation(x = value, option = 'spline', method = 'fmm'))
# imputation example and methodology
# data_temp <- filter(spline_interpolation, Indicator_Id == 'GFDD.DI.14' & Country_Value == 'New Zealand') %>% arrange(date) %>% mutate(value = as.numeric(value))
# ggplot(data_temp, aes(x = date, y = value)) + geom_point()
# data_temp <- data_temp %>% mutate(value = na.interpolation(x = value, option = 'spline', method = 'fmm'))
# # Forsythe, G. E., Malcolm, M. A. and Moler, C. B. (1977) Computer Methods for Mathematical Computations. Wiley.
# linear interpolation
linear_interpolation <- linear_interpolation %>% group_by(category,
Indicator_Value,
Indicator_Id,
Country_Value) %>% arrange(category,
Indicator_Value,
Country_Value,
date) %>% mutate(value_imp = na.interpolation(x = value, option = 'linear'))
# # imputation example and methodology
# data_temp <- filter(linear_interpolation, Indicator_Id == 'GFDD.OI.01' & Country_Value == 'Iceland') %>% arrange(date) %>% mutate(value = as.numeric(value))
# ggplot(data_temp, aes(x = date, y = value)) + geom_point()
# data_temp <- data_temp %>% mutate(value = na.interpolation(x = value, option = 'linear'))
save(linear_interpolation, file = "linear_interpolation.rda")
save(spline_interpolation, file = "spline_interpolation.rda")
load("linear_interpolation.rda")
load("spline_interpolation.rda")
rm(list = ls())
library(plotly)
ggplotly(gg_linear)
setwd('~/Programming/R/R_code/CMASF/CBR')
load("linear_interpolation.rda")
load("spline_interpolation.rda")
library(purrr)
### ggplotting interpolation ###
linear_long <- gather(linear_interpolation, key = value_category, value = value, -c(category, Indicator_Value, Indicator_Id, Country_Value, nas_number, date)) %>% mutate(value_category = factor(value_category, levels = c('value_imp', 'value')), value_category = recode(value_category, value_imp = 'Дополнено', value = 'Исходный ряд'))
spline_long <- gather(spline_interpolation, key = value_category, value = value, -c(category, Indicator_Value, Indicator_Id, Country_Value, nas_number, date)) %>% mutate(value_category = factor(value_category, levels = c('value_imp', 'value')), value_category = recode(value_category, value_imp = 'Дополнено', value = 'Исходный ряд'))
# rm(linear_interpolation, spline_interpolation, no_interpolation, fs_data)
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = guide_legend(title = ''))
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8),
legend.position = "top")
ggplotly()
rm(list = ls())
setwd('~/Programming/R/R_code/CMASF/CBR')
load("linear_interpolation.rda")
load("spline_interpolation.rda")
library(purrr)
# -------------------------------
# GGplotting NA Imputation
# -------------------------------
### ggplotting interpolation ###
linear_long <- gather(linear_interpolation, key = value_category, value = value, -c(category, Indicator_Value, Indicator_Id, Country_Value, nas_number, date)) %>% mutate(value_category = factor(value_category, levels = c('value_imp', 'value')), value_category = recode(value_category, value_imp = 'Дополнено', value = 'Исходный ряд'))
spline_long <- gather(spline_interpolation, key = value_category, value = value, -c(category, Indicator_Value, Indicator_Id, Country_Value, nas_number, date)) %>% mutate(value_category = factor(value_category, levels = c('value_imp', 'value')), value_category = recode(value_category, value_imp = 'Дополнено', value = 'Исходный ряд'))
# rm(linear_interpolation, spline_interpolation, no_interpolation, fs_data)
gg_linear <- ggplot(linear_long, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line()
gg_linear <- gg_linear + facet_wrap(~Country_Value + Indicator_Value, scales = "free")
gg_linear <- gg_linear + labs(x = NULL, y = NULL, title = "Ряды, заполненные линейной интерполяцией")
gg_linear <- gg_linear + guides(colour = guide_legend(title = ''))
gg_linear <- gg_linear + theme_bw() + theme(strip.background = element_blank(),
strip.text = element_text(size = 8),
legend.position = "top")
gg_linear
# function
plotting <- function(x) {return(ggplot(data = x, aes(x = lubridate::year(as.Date(date, format = '%Y')), y = value, group = value_category, colour = value_category)) + geom_line() + facet_wrap(~Country_Value + Indicator_Value, scales = "free") + labs(x = NULL, y = NULL) + guides(colour = guide_legend(title = '')) + theme_bw() + theme(strip.background = element_blank(), strip.text = element_text(size = 8), axis.text.x= element_text(size = 7), legend.position = "top"))}
# separating graphs by category
results <- spline_long %>% slice_rows('category') %>% by_slice(plotting)
# ggplotting
for (i in 1:length(results$category)) {
print(results$.out[[i]] + ggtitle(paste0(results$category[[i]], ": ряды, заполненные линейной сплайнами")))
}
library(slidify)
source('~/Programming/R/R_code/functions/my_publish.R')
my_publish(repo = 'Projects/CBR', username = 'IrinaGoloshchapova', browse_URL = TRUE, folder = TRUE)
my_publish
my_publish_short <- function (repo, username = getOption("github.user"), browse_URL = FALSE, folder = FALSE)
{
message("Publishing deck to ", username, "/", repo)
system("git config --global user.email \"you@example.com\"")
system(sprintf("git config --global user.name %s", username))
system("git add .")
system("git commit -a -m \"publishing deck\"")
system(sprintf("git push"))
if (browse_URL == TRUE) {
if (folder == TRUE) {
folder_name = basename(getwd())
}
link = sprintf("http://%s.github.io/%s/%s", username, repo, folder_name)
message("You can now view your slide deck at ", link)
browseURL(link)
}
}
my_publish_short(repo = 'Projects/CBR', username = 'IrinaGoloshchapova', browse_URL = TRUE, folder = TRUE)
setwd('~/GitHub/Projects')
my_publish_short(repo = 'Projects/CBR', username = 'IrinaGoloshchapova', browse_URL = TRUE, folder = TRUE)
getwd()
basename(getwd())
setwd('~/GitHub/Projects/CBR')
my_publish_short(repo = 'Projects/CBR', username = 'IrinaGoloshchapova', browse_URL = TRUE, folder = TRUE)
my_publish_short(repo = 'Projects', username = 'IrinaGoloshchapova', browse_URL = TRUE, folder = TRUE)
